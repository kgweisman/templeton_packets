group_by(ctry, subj, packet, version, question) %>%
distinct(response) %>%
count() %>%
ungroup() %>%
mutate(probs = ifelse(n > 1, TRUE, FALSE))
# look at full check (uncomment to look)
# d_cat_check
# count up problems and calculate error rate
error_rates_cat <- d_cat_check %>%
ungroup() %>%
count(probs) %>%
rename(n = nn) %>%
filter(!is.na(probs)) %>%
mutate(percentage = n/sum(n)) %>%
data.frame()
error_rates_cat
errors_cat <- d_cat_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(ctry, subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_cat.csv)
# errors_cat
# get counts per country to get proportions later
all_cat <- d_cat_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_cat %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_cat %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(packet, version) %>%
complete(packet, version, fill = list(n = 0)) %>%
full_join(all_cat %>% count(packet, version) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(subj) %>%
complete(subj, fill = list(n = 0)) %>%
full_join(all_cat %>% count(subj) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(question) %>%
complete(question, fill = list(n = 0)) %>%
full_join(all_cat %>% count(question) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(entr) %>%
complete(entr, fill = list(n = 0)) %>%
full_join(all_cat %>% count(entr) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
# load packages
library(tidyverse)
# load data
d_all <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/packets_data.csv")[-1]
question_key <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/question_key_R.csv")[1]
# these "-1"s are to get rid of that extra column at the beginning
# make custom min and max functions
min_fun <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
max_fun <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA)
# figure out which variables are numeric
cat_vars <- d_all %>%
select_if(is.numeric) %>%
names()
# make a separate dataframe for numerical data
d_num <- d_all %>%
select(ctry, subj, packet, version, batc, entr, date, c(cat_vars))
d_num_check <- d_num %>%
gather(question, response, -c(ctry, subj, packet, version, batc, entr, date)) %>%
group_by(subj, packet, version, question) %>%
summarise(count = n(),
min = min_fun(response),
max = max_fun(response),
mean = mean(response, na.rm = T),
sd = sd(response, na.rm = T)) %>%
mutate(min_max_mean_mismatch = ifelse(min == max & min == mean, FALSE, TRUE),
sd_nonzero = ifelse(sd %in% c(0, NA), FALSE, TRUE),
probs = min_max_mean_mismatch | sd_nonzero)
# look at full check (uncomment to look)
# d_num_check
# count up problems and calculate error rate
error_rates_num <- d_num_check %>%
ungroup() %>%
count(probs) %>%
filter(!is.na(probs)) %>%
mutate(percentage = n/sum(n)) %>%
data.frame()
error_rates_num
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_num.csv)
# errors_num
# get counts per country to get proportions later
all_num <- d_num_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_num %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_num %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(packet, version) %>%
complete(packet, version, fill = list(n = 0)) %>%
full_join(all_num %>% count(packet, version) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(subj) %>%
complete(subj, fill = list(n = 0)) %>%
full_join(all_num %>% count(subj) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(question) %>%
complete(question, fill = list(n = 0)) %>%
full_join(all_num %>% count(question) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(entr) %>%
complete(entr, fill = list(n = 0)) %>%
full_join(all_num %>% count(entr) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
# figure out which variables are factor
factor_vars <- d_all %>%
select_if(is.factor) %>%
names()
char_vars <- d_all %>%
select_if(is.character) %>%
names()
log_vars <- d_all %>%
select_if(is.logical) %>%
names()
cat_vars <- c(factor_vars, char_vars, log_vars) %>% unique()
# make a separate dataframe for categorical data
d_cat <- d_all %>%
select(ctry, subj, packet, version, batc, entr, date, c(cat_vars))
d_cat_check <- d_cat %>%
gather(question, response, -c(ctry, subj, packet, version, batc, entr, date)) %>%
group_by(ctry, subj, packet, version, question) %>%
distinct(response) %>%
count() %>%
ungroup() %>%
mutate(probs = ifelse(n > 1, TRUE, FALSE))
# look at full check (uncomment to look)
# d_cat_check
# count up problems and calculate error rate
error_rates_cat <- d_cat_check %>%
ungroup() %>%
count(probs) %>%
rename(n = nn) %>%
filter(!is.na(probs)) %>%
mutate(percentage = n/sum(n)) %>%
data.frame()
error_rates_cat
errors_cat <- d_cat_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(ctry, subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_cat.csv)
# errors_cat
# get counts per country to get proportions later
all_cat <- d_cat_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_cat %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_cat %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(packet, version) %>%
complete(packet, version, fill = list(n = 0)) %>%
full_join(all_cat %>% count(packet, version) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(subj) %>%
complete(subj, fill = list(n = 0)) %>%
full_join(all_cat %>% count(subj) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(question) %>%
complete(question, fill = list(n = 0)) %>%
full_join(all_cat %>% count(question) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(entr) %>%
complete(entr, fill = list(n = 0)) %>%
full_join(all_cat %>% count(entr) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
write.csv(errors_num, "./errors_num.csv")
write.csv(errors_num, "./errors_cat.csv")
glimpse(d_num_check)
d_num_check %>% filter(probs)
d_num_check %>% filter(probs == TRUE)
d_num_check %>% filter(probs == TRUE) %>% count()
d_num_check %>% filter(probs == TRUE) %>% count() %>% summarise(sum = sum(n, na.rm = T))
d_num_check %>% filter(probs == TRUE) %>% count() %>% ungroup() %>% summarise(sum = sum(n, na.rm = T))
errors_num %>% glimpse()
errors_num %>% count()
d_num_check %>% filter(probs = TRUE) %>% count()
d_num_check %>% filter(probs == TRUE) %>% count()
d_num_check %>% filter(probs == TRUE) %>% ungroup() %>% count()
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question)
errors_num %>% count()
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question, probs) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
filter(probs == TRUE) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_num %>% count()
532/2
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question, probs)
View(errors_num)
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question, probs) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
filter(probs == TRUE) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question) %>%
arrange(subj, packet, version, question, batc)
count(errors_num)
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question, probs) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
filter(probs == TRUE) %>%
ungroup() %>%
select(-probs, -response) %>%
distinct(ctry, subj, packet, version, batc, entr, date, question) %>%
arrange(subj, packet, version, question, batc)
count(errors_num)
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_num.csv)
# errors_num
# get counts per country to get proportions later
all_num <- d_num_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_num %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_num %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
# load packages
library(tidyverse)
# load data
d_all <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/packets_data.csv")[-1]
question_key <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/question_key_R.csv")[1]
# these "-1"s are to get rid of that extra column at the beginning
# make custom min and max functions
min_fun <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
max_fun <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA)
# figure out which variables are numeric
cat_vars <- d_all %>%
select_if(is.numeric) %>%
names()
# make a separate dataframe for numerical data
d_num <- d_all %>%
select(ctry, subj, packet, version, batc, entr, date, c(cat_vars))
d_num_check <- d_num %>%
gather(question, response, -c(ctry, subj, packet, version, batc, entr, date)) %>%
group_by(subj, packet, version, question) %>%
summarise(count = n(),
min = min_fun(response),
max = max_fun(response),
mean = mean(response, na.rm = T),
sd = sd(response, na.rm = T)) %>%
mutate(min_max_mean_mismatch = ifelse(min == max & min == mean, FALSE, TRUE),
sd_nonzero = ifelse(sd %in% c(0, NA), FALSE, TRUE),
probs = min_max_mean_mismatch | sd_nonzero)
# look at full check (uncomment to look)
# d_num_check
# count up problems and calculate error rate
error_rates_num <- d_num_check %>%
ungroup() %>%
count(probs) %>%
filter(!is.na(probs)) %>%
mutate(percentage = n/sum(n)) %>%
data.frame()
error_rates_num
errors_num <- d_num_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_num.csv)
# errors_num
# get counts per country to get proportions later
all_num <- d_num_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_num %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_num %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_num %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(packet, version) %>%
complete(packet, version, fill = list(n = 0)) %>%
full_join(all_num %>% count(packet, version) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(subj) %>%
complete(subj, fill = list(n = 0)) %>%
full_join(all_num %>% count(subj) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(question) %>%
complete(question, fill = list(n = 0)) %>%
full_join(all_num %>% count(question) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_num %>%
count(entr) %>%
complete(entr, fill = list(n = 0)) %>%
full_join(all_num %>% count(entr) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
# figure out which variables are factor
factor_vars <- d_all %>%
select_if(is.factor) %>%
names()
char_vars <- d_all %>%
select_if(is.character) %>%
names()
log_vars <- d_all %>%
select_if(is.logical) %>%
names()
cat_vars <- c(factor_vars, char_vars, log_vars) %>% unique()
# make a separate dataframe for categorical data
d_cat <- d_all %>%
select(ctry, subj, packet, version, batc, entr, date, c(cat_vars))
d_cat_check <- d_cat %>%
gather(question, response, -c(ctry, subj, packet, version, batc, entr, date)) %>%
group_by(ctry, subj, packet, version, question) %>%
distinct(response) %>%
count() %>%
ungroup() %>%
mutate(probs = ifelse(n > 1, TRUE, FALSE))
# look at full check (uncomment to look)
# d_cat_check
# count up problems and calculate error rate
error_rates_cat <- d_cat_check %>%
ungroup() %>%
count(probs) %>%
rename(n = nn) %>%
filter(!is.na(probs)) %>%
mutate(percentage = n/sum(n)) %>%
data.frame()
error_rates_cat
errors_cat <- d_cat_check %>%
filter(probs == TRUE) %>%
data.frame() %>%
select(ctry, subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
# look at full errors (uncomment to look, or look at errors_cat.csv)
# errors_cat
# get counts per country to get proportions later
all_cat <- d_cat_check %>%
data.frame() %>%
select(subj, packet, version, question) %>%
left_join(d_cat %>%
gather(question, response,
-c(ctry, subj, packet, version, batc, entr, date))) %>%
ungroup() %>%
distinct(ctry, subj, packet, version, batc, entr, date, question, response) %>%
arrange(subj, packet, version, question, batc)
errors_cat %>%
count(ctry) %>%
complete(ctry, fill = list(n = 0)) %>%
full_join(all_cat %>% count(ctry) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(packet, version) %>%
complete(packet, version, fill = list(n = 0)) %>%
full_join(all_cat %>% count(packet, version) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(subj) %>%
complete(subj, fill = list(n = 0)) %>%
full_join(all_cat %>% count(subj) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(question) %>%
complete(question, fill = list(n = 0)) %>%
full_join(all_cat %>% count(question) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
errors_cat %>%
count(entr) %>%
complete(entr, fill = list(n = 0)) %>%
full_join(all_cat %>% count(entr) %>% rename(total_n = n)) %>%
mutate(proportion = n/total_n) %>%
arrange(desc(proportion))
write.csv(errors_num, "./errors_num.csv")
write.csv(errors_num, "./errors_cat.csv")
# load packages
library(tidyverse)
# load data
d_all <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/packets_data.csv")[-1]
question_key <- read.csv("//Users/kweisman/Documents/Research (Stanford)/Projects/Templeton Grant/DATA WRANGLING/packets/question_key_R.csv")[1]
# these "-1"s are to get rid of that extra column at the beginning
glimpse(d_all)
